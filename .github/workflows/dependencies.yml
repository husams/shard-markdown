name: Dependencies

on:
  schedule:
    # Run every Monday at 8 AM UTC
    - cron: '0 8 * * 1'
  workflow_dispatch:
  push:
    paths:
      - 'pyproject.toml'
      - 'uv.lock'

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Check for security vulnerabilities
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --dev

      - name: Install security tools
        run: |
          uv pip install safety bandit[toml]

      - name: Run safety check
        id: safety
        run: |
          echo "## Safety Security Scan" >> security_report.md
          echo "" >> security_report.md
          if uv run safety check --json > safety_report.json 2>&1; then
            echo "✅ No known security vulnerabilities found" >> security_report.md
          else
            echo "⚠️ Security vulnerabilities detected:" >> security_report.md
            echo "" >> security_report.md
            echo "\`\`\`json" >> security_report.md
            cat safety_report.json >> security_report.md
            echo "\`\`\`" >> security_report.md
          fi

      - name: Run bandit scan
        id: bandit
        run: |
          echo "" >> security_report.md
          echo "## Bandit Code Security Scan" >> security_report.md
          echo "" >> security_report.md
          if uv run bandit -r src/ -f json -o bandit_report.json 2>&1; then
            echo "✅ No security issues found in code" >> security_report.md
          else
            echo "⚠️ Security issues detected in code:" >> security_report.md
            echo "" >> security_report.md
            echo "\`\`\`json" >> security_report.md
            cat bandit_report.json >> security_report.md
            echo "\`\`\`" >> security_report.md
          fi

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            security_report.md
            safety_report.json
            bandit_report.json

      - name: Comment security report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security_report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Security Audit Report\n\n${report}`
            });

  # Check for outdated dependencies
  dependency-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Check for outdated dependencies
        id: outdated
        run: |
          echo "## Dependency Status" > dependency_report.md
          echo "" >> dependency_report.md

          # Check if uv.lock is up to date
          uv sync --dev
          if git diff --quiet uv.lock; then
            echo "✅ Dependencies are up to date" >> dependency_report.md
          else
            echo "📦 Dependencies have updates available" >> dependency_report.md
            echo "" >> dependency_report.md
            echo "Run \`uv sync\` to update the lock file." >> dependency_report.md
          fi

      - name: Generate dependency tree
        run: |
          echo "" >> dependency_report.md
          echo "## Dependency Tree" >> dependency_report.md
          echo "" >> dependency_report.md
          echo "\`\`\`" >> dependency_report.md
          uv tree >> dependency_report.md
          echo "\`\`\`" >> dependency_report.md

      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: dependency_report.md

  # Auto-update dependencies (creates PR)
  auto-update:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Update dependencies
        id: update
        run: |
          # Create backup of current lock file
          cp uv.lock uv.lock.backup

          # Update dependencies
          uv sync --upgrade

          # Check if there are changes
          if ! git diff --quiet uv.lock; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Dependencies updated successfully"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No dependency updates available"
          fi

      - name: Run tests with updated dependencies
        if: steps.update.outputs.changes == 'true'
        run: |
          uv sync --dev
          uv run pytest tests/unit/ --tb=short

      - name: Create Pull Request
        if: steps.update.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update dependencies"
          title: "chore: automated dependency updates"
          body: |
            ## Automated Dependency Updates

            This PR contains automated updates to project dependencies.

            ### Changes
            - Updated `uv.lock` with latest compatible versions
            - All unit tests pass with updated dependencies

            ### Review Checklist
            - [ ] Review dependency changes in `uv.lock`
            - [ ] Check for any breaking changes in updated packages
            - [ ] Verify all tests pass
            - [ ] Test CLI functionality manually if needed

            Generated automatically by the Dependencies workflow.
          branch: chore/dependency-updates
          delete-branch: true
          draft: false

      - name: Restore lock file on failure
        if: failure() && steps.update.outputs.changes == 'true'
        run: |
          mv uv.lock.backup uv.lock
          echo "Restored original lock file due to failure"

  # License compliance check
  license-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --dev

      - name: Install license checker
        run: uv pip install pip-licenses

      - name: Check licenses
        run: |
          echo "## License Compliance Report" > license_report.md
          echo "" >> license_report.md
          echo "### Dependency Licenses" >> license_report.md
          echo "" >> license_report.md
          echo "\`\`\`" >> license_report.md
          uv run pip-licenses --format=markdown >> license_report.md
          echo "\`\`\`" >> license_report.md

      - name: Check for GPL licenses
        id: gpl_check
        run: |
          if uv run pip-licenses --format=plain | grep -i "gpl\|agpl"; then
            echo "gpl_found=true" >> $GITHUB_OUTPUT
            echo "⚠️ GPL/AGPL licenses detected!" >> license_report.md
          else
            echo "gpl_found=false" >> $GITHUB_OUTPUT
            echo "✅ No GPL/AGPL licenses found" >> license_report.md
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license_report.md

      - name: Fail on GPL licenses
        if: steps.gpl_check.outputs.gpl_found == 'true'
        run: |
          echo "GPL/AGPL licenses detected. Please review for compatibility."
          exit 1
