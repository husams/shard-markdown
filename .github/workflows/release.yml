name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - testpypi
          - pypi
        default: testpypi

env:
  PYTHON_VERSION: "3.11"

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version and environment
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            ENVIRONMENT="pypi"
          else
            VERSION="${{ github.event.inputs.version }}"
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          fi
          
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"
          echo "Environment: ${ENVIRONMENT}"

      - name: Set environment output
        id: environment
        run: |
          echo "environment=${{ steps.version.outputs.environment }}" >> $GITHUB_OUTPUT

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+([a-zA-Z0-9\.\-]+)?$'; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi

  test-before-release:
    runs-on: ubuntu-latest
    needs: validate-release
    services:
      chromadb:
        image: chromadb/chroma:latest
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/api/v1/heartbeat || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --dev --extra chromadb

      - name: Wait for ChromaDB
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/api/v1/heartbeat; do sleep 2; done'

      - name: Run full test suite
        env:
          CHROMA_HOST: localhost
          CHROMA_PORT: 8000
        run: |
          uv run pytest \
            --cov=shard_markdown \
            --cov-fail-under=80 \
            tests/

      - name: Run CLI smoke tests
        run: |
          uv run shard-md --help
          uv run shard-md config --help
          uv run shard-md process --help

  build-and-publish:
    runs-on: ubuntu-latest
    needs: [validate-release, test-before-release]
    environment: ${{ needs.validate-release.outputs.environment }}
    permissions:
      id-token: write  # For trusted publishing
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: uv sync --dev

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          sed -i "s/version = \".*\"/version = \"${VERSION}\"/" pyproject.toml
          echo "Updated version to: ${VERSION}"
          grep "version =" pyproject.toml

      - name: Build package
        run: uv build

      - name: Check package
        run: |
          uv run twine check dist/*

      - name: Test package installation
        run: |
          # Create fresh virtual environment to test installation
          python -m venv test_env
          source test_env/bin/activate
          
          # Test wheel installation
          pip install dist/*.whl
          shard-md --version
          shard-md --help
          
          deactivate
          rm -rf test_env

      - name: Publish to Test PyPI
        if: needs.validate-release.outputs.environment == 'testpypi'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

      - name: Publish to PyPI
        if: needs.validate-release.outputs.environment == 'pypi'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-dist-${{ needs.validate-release.outputs.version }}
          path: dist/

  create-github-release:
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-publish]
    if: needs.validate-release.outputs.environment == 'pypi' && github.event_name == 'workflow_dispatch'
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-dist-${{ needs.validate-release.outputs.version }}
          path: dist/

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="v${{ needs.validate-release.outputs.version }}"
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)")
          fi
          
          # Create changelog
          cat > CHANGELOG.md << EOF
          ## What's Changed
          
          ${COMMITS}
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...${VERSION}
          EOF
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          release_name: Release v${{ needs.validate-release.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(needs.validate-release.outputs.version, '-') }}

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/
          asset_name: shard-markdown-${{ needs.validate-release.outputs.version }}-dist.zip
          asset_content_type: application/zip

  notify-success:
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-publish]
    if: success()
    steps:
      - name: Notify success
        run: |
          echo "ðŸŽ‰ Successfully released shard-markdown v${{ needs.validate-release.outputs.version }} to ${{ needs.validate-release.outputs.environment }}!"
          echo "Package should be available at:"
          if [ "${{ needs.validate-release.outputs.environment }}" = "pypi" ]; then
            echo "https://pypi.org/project/shard-markdown/${{ needs.validate-release.outputs.version }}/"
          else
            echo "https://test.pypi.org/project/shard-markdown/${{ needs.validate-release.outputs.version }}/"
          fi