name: Documentation

on:
  push:
    branches: [main]
    paths:
      - "docs/**"
      - "src/**"
      - "README.md"
      - "pyproject.toml"
  pull_request:
    branches: [main]
    paths:
      - "docs/**"
      - "src/**"
      - "README.md"
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Build documentation
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for git info in docs

      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --dev
          # Install documentation dependencies
          uv pip install -r docs/requirements.txt

      - name: Generate API documentation
        run: |
          # Create API docs directory if it doesn't exist
          mkdir -p docs/api

          # Generate module documentation
          uv run sphinx-apidoc -o docs/api src/shard_markdown --force --separate

      - name: Build Sphinx documentation
        run: |
          cd docs
          uv run sphinx-build -b html . _build/html --keep-going

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/

      - name: Check documentation links
        run: |
          cd docs
          uv run sphinx-build -b linkcheck . _build/linkcheck || true

  # Generate CLI documentation
  cli-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --dev

      - name: Generate CLI documentation
        run: |
          mkdir -p docs/cli

          # Generate help text for main command
          echo "# CLI Reference" > docs/cli/reference.md
          echo "" >> docs/cli/reference.md
          echo "## Main Command" >> docs/cli/reference.md
          echo "" >> docs/cli/reference.md
          echo "\`\`\`" >> docs/cli/reference.md
          uv run shard-md --help >> docs/cli/reference.md
          echo "\`\`\`" >> docs/cli/reference.md
          echo "" >> docs/cli/reference.md

          # Generate help for subcommands
          for cmd in process collections query config; do
            echo "## shard-md $cmd" >> docs/cli/reference.md
            echo "" >> docs/cli/reference.md
            echo "\`\`\`" >> docs/cli/reference.md
            uv run shard-md $cmd --help >> docs/cli/reference.md || echo "Command not available" >> docs/cli/reference.md
            echo "\`\`\`" >> docs/cli/reference.md
            echo "" >> docs/cli/reference.md
          done

      - name: Upload CLI documentation
        uses: actions/upload-artifact@v4
        with:
          name: cli-documentation
          path: docs/cli/

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-latest
    needs: [build-docs, cli-docs]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download documentation
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/

      - name: Download CLI documentation
        uses: actions/download-artifact@v4
        with:
          name: cli-documentation
          path: docs/_build/html/cli/

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          enablement: true # Automatically enable Pages if not already enabled

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/_build/html/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Documentation quality checks
  docs-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --dev
          uv pip install doc8 sphinx-lint

      - name: Check documentation style
        run: |
          # Check RST/Markdown style
          find docs -name "*.rst" -o -name "*.md" | xargs uv run doc8 --max-line-length 100 || true

      - name: Check README
        run: |
          # Check README for common issues
          if ! grep -q "## Installation" README.md; then
            echo "Warning: README.md missing Installation section"
          fi

          if ! grep -q "## Usage" README.md && ! grep -q "## Quick Start" README.md; then
            echo "Warning: README.md missing Usage/Quick Start section"
          fi

          if ! grep -q "## License" README.md; then
            echo "Warning: README.md missing License section"
          fi

      - name: Check docstring coverage
        run: |
          uv pip install interrogate
          uv run interrogate src/shard_markdown --verbose --fail-under=70 || true

  # Update documentation on changes
  update-docs:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --dev

      - name: Update CLI documentation
        id: update_cli_docs
        run: |
          mkdir -p docs/cli

          # Generate updated CLI documentation
          echo "# CLI Reference" > docs/cli/reference.md
          echo "" >> docs/cli/reference.md
          echo "This documentation is auto-generated from the CLI help text." >> docs/cli/reference.md
          echo "" >> docs/cli/reference.md
          echo "## Main Command" >> docs/cli/reference.md
          echo "" >> docs/cli/reference.md
          echo "\`\`\`" >> docs/cli/reference.md
          uv run shard-md --help >> docs/cli/reference.md
          echo "\`\`\`" >> docs/cli/reference.md

          # Check if there are changes
          if ! git diff --quiet docs/cli/reference.md; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Update version in documentation
        id: update_version
        run: |
          VERSION=$(grep "^version =" pyproject.toml | head -1 | sed 's/version = "\(.*\)"/\1/')

          # Update version in Sphinx config if it exists
          if [ -f docs/conf.py ]; then
            sed -i "s/version = '.*'/version = '${VERSION}'/" docs/conf.py
            sed -i "s/release = '.*'/release = '${VERSION}'/" docs/conf.py
          fi

          if ! git diff --quiet docs/; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit documentation updates
        if: steps.update_cli_docs.outputs.changes == 'true' || steps.update_version.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/
          git commit -m "docs: auto-update CLI documentation and version" || exit 0
