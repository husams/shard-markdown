name: Setup ChromaDB
description: Setup ChromaDB container across different platforms with robust health checks and version-aware API detection

inputs:
  chromadb-version:
    description: ChromaDB version to use
    default: "1.0.16"
    required: false
  port:
    description: Port to expose ChromaDB on
    default: "8000"
    required: false
  timeout:
    description: Timeout in seconds for health checks
    default: "120"
    required: false

runs:
  using: composite
  steps:
    - name: Setup ChromaDB on Linux
      if: runner.os == 'Linux'
      shell: bash
      run: |
        echo "🐧 Setting up ChromaDB on Linux..."
        echo "📋 Version: ${{ inputs.chromadb-version }}"
        echo "🔌 Port: ${{ inputs.port }}"

        # Stop any existing container
        docker stop chromadb 2>/dev/null || true
        docker rm chromadb 2>/dev/null || true

        # Start ChromaDB with version-aware health checks
        # Check v2, v1, and root heartbeat endpoints for compatibility across versions
        docker run -d \
          --name chromadb \
          -p ${{ inputs.port }}:8000 \
          -e ANONYMIZED_TELEMETRY=false \
          -e ALLOW_RESET=true \
          -e IS_PERSISTENT=true \
          --health-cmd "nc -z localhost 8000 || exit 1" \
          --health-interval 5s \
          --health-timeout 10s \
          --health-retries 24 \
          --health-start-period 30s \
          chromadb/chroma:${{ inputs.chromadb-version }}

        echo "⏳ Waiting for ChromaDB to become healthy..."

        # Wait for container to be healthy with extended timeout
        if ! timeout ${{ inputs.timeout }} bash -c 'until docker inspect chromadb --format="{{.State.Health.Status}}" 2>/dev/null | grep -q healthy; do sleep 2; echo -n "."; done'; then
          echo "❌ ChromaDB health check failed on Linux"
          echo "📋 Container logs:"
          docker logs chromadb
          echo "🔍 Container inspect:"
          docker inspect chromadb
          exit 1
        fi

        echo "✅ ChromaDB is healthy on Linux"

    - name: Setup ChromaDB on macOS
      if: runner.os == 'macOS'
      shell: bash
      run: |
        echo "🍎 Setting up ChromaDB on macOS..."
        echo "📋 Version: ${{ inputs.chromadb-version }}"
        echo "🔌 Port: ${{ inputs.port }}"

        # Stop any existing container
        docker stop chromadb 2>/dev/null || true
        docker rm chromadb 2>/dev/null || true

        # Start ChromaDB (health checks may not work on macOS Docker)
        docker run -d \
          --name chromadb \
          -p ${{ inputs.port }}:8000 \
          -e ANONYMIZED_TELEMETRY=false \
          -e ALLOW_RESET=true \
          -e IS_PERSISTENT=true \
          chromadb/chroma:${{ inputs.chromadb-version }}

        echo "⏳ Waiting for ChromaDB API to be ready with version detection..."

        # Version-aware health check with multiple endpoints
        elapsed=0
        api_ready=false
        detected_version=""

        while [ $elapsed -lt ${{ inputs.timeout }} ] && [ "$api_ready" = "false" ]; do
          # Try v1 API (ChromaDB 1.0.16 uses v1)
          if wget --spider -q http://localhost:${{ inputs.port }}/api/v1/heartbeat 2>/dev/null; then
            echo "✅ ChromaDB v1 API heartbeat is ready on macOS"
            detected_version="v1"
            api_ready=true
            break
          fi

          # Try root heartbeat endpoint
          if wget --spider -q http://localhost:${{ inputs.port }}/heartbeat 2>/dev/null; then
            echo "✅ ChromaDB root heartbeat is ready on macOS"
            detected_version="root"
            api_ready=true
            break
          fi

          sleep 3
          elapsed=$((elapsed + 3))
          echo -n "."
        done

        if [ "$api_ready" = "false" ]; then
          echo "❌ ChromaDB startup timeout on macOS"
          echo "📋 Container logs:"
          docker logs chromadb
          echo "🔍 Container status:"
          docker ps -a --filter name=chromadb
          exit 1
        fi

        echo "🔍 Detected API version: $detected_version"

    - name: Setup ChromaDB on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "🪟 Setting up ChromaDB on Windows..."
        Write-Host "📋 Version: ${{ inputs.chromadb-version }}"
        Write-Host "🔌 Port: ${{ inputs.port }}"

        # Stop any existing container
        try { docker stop chromadb 2>$null } catch {}
        try { docker rm chromadb 2>$null } catch {}

        # Start ChromaDB
        docker run -d `
          --name chromadb `
          -p ${{ inputs.port }}:8000 `
          -e ANONYMIZED_TELEMETRY=false `
          -e ALLOW_RESET=true `
          -e IS_PERSISTENT=true `
          chromadb/chroma:${{ inputs.chromadb-version }}

        Write-Host "⏳ Waiting for ChromaDB API to be ready with version detection..."

        # Windows PowerShell version-aware health check
        $timeout = [int]"${{ inputs.timeout }}"
        $elapsed = 0
        $ready = $false
        $detectedVersion = ""

        while ($elapsed -lt $timeout -and -not $ready) {
          try {
            # Try v2 API first
            $response = Invoke-RestMethod -Uri "http://localhost:${{ inputs.port }}/api/v2/heartbeat" -Method Get -TimeoutSec 5
            Write-Host "✅ ChromaDB v2 API is ready on Windows"
            $detectedVersion = "v2"
            $ready = $true
          } catch {
            try {
              # Fall back to v1 API
              $response = Invoke-RestMethod -Uri "http://localhost:${{ inputs.port }}/api/v1/heartbeat" -Method Get -TimeoutSec 5
              Write-Host "✅ ChromaDB v1 API is ready on Windows"
              $detectedVersion = "v1"
              $ready = $true
            } catch {
              try {
                # Try root heartbeat
                $response = Invoke-RestMethod -Uri "http://localhost:${{ inputs.port }}/heartbeat" -Method Get -TimeoutSec 5
                Write-Host "✅ ChromaDB root API is ready on Windows"
                $detectedVersion = "root"
                $ready = $true
              } catch {
                Start-Sleep -Seconds 3
                $elapsed += 3
                Write-Host -NoNewline "."
              }
            }
          }
        }

        if (-not $ready) {
          Write-Host "❌ ChromaDB startup timeout on Windows"
          Write-Host "📋 Container logs:"
          docker logs chromadb
          Write-Host "🔍 Container status:"
          docker ps -a --filter name=chromadb
          exit 1
        }

        Write-Host "🔍 Detected API version: $detectedVersion"

    - name: Verify ChromaDB API with Version Detection
      shell: bash
      run: |
        echo "🔍 Final comprehensive verification of ChromaDB API..."

        # Use the version detection script if available
        if [ -f "./scripts/detect-chromadb-version.sh" ]; then
          echo "📋 Running version detection script..."
          ./scripts/detect-chromadb-version.sh --host localhost --port ${{ inputs.port }} --json || {
            echo "⚠️ Version detection script failed, falling back to manual detection"
          }
        fi

        # Manual version detection with comprehensive fallbacks
        base_url="http://localhost:${{ inputs.port }}"
        api_version=""
        heartbeat_url=""
        version_url=""

        echo "🔍 Testing API endpoint availability..."

        # Test v1 API heartbeat (ChromaDB 1.0.16 uses v1)
        if wget --spider -q --timeout=10 "${base_url}/api/v1/heartbeat" 2>/dev/null; then
          api_version="v1"
          heartbeat_url="${base_url}/api/v1/heartbeat"
          version_url="${base_url}/api/v1/version"
          echo "✅ ChromaDB v1 API heartbeat endpoint is accessible"
        # Test root heartbeat (legacy)
        elif wget --spider -q --timeout=10 "${base_url}/heartbeat" 2>/dev/null; then
          api_version="root"
          heartbeat_url="${base_url}/heartbeat"
          version_url="${base_url}/version"
          echo "✅ ChromaDB root heartbeat endpoint is accessible"
        else
          echo "❌ No compatible ChromaDB API endpoints found"
          echo "🔍 Debug: Testing basic connectivity..."
          wget --spider --timeout=10 "${base_url}/" 2>&1 || true
          echo "📋 Container logs:"
          docker logs chromadb || true
          exit 1
        fi

        # Test heartbeat endpoint with retries
        echo "💓 Testing heartbeat endpoint: $heartbeat_url"
        retry_count=0
        max_retries=5
        while [ $retry_count -lt $max_retries ]; do
          if wget --spider -q --timeout=10 "$heartbeat_url" 2>/dev/null; then
            echo "✅ ChromaDB heartbeat successful"
            break
          fi
          retry_count=$((retry_count + 1))
          if [ $retry_count -lt $max_retries ]; then
            echo "⏳ Heartbeat attempt $retry_count failed, retrying in 2s..."
            sleep 2
          else
            echo "❌ ChromaDB heartbeat failed after $max_retries attempts"
            exit 1
          fi
        done

        # Test version endpoint (non-critical)
        echo "📋 Testing version endpoint: $version_url"
        if wget --spider -q --timeout=10 "$version_url" 2>/dev/null; then
          echo "✅ ChromaDB version endpoint accessible"
        else
          echo "⚠️ ChromaDB version endpoint not accessible (non-critical)"
        fi

        # Export detected information for subsequent steps
        echo "CHROMADB_API_VERSION=$api_version" >> $GITHUB_ENV
        echo "CHROMADB_HEARTBEAT_URL=$heartbeat_url" >> $GITHUB_ENV
        echo "CHROMADB_VERSION_URL=$version_url" >> $GITHUB_ENV

        echo "🎉 ChromaDB setup complete and verified!"
        echo "📊 Configuration Summary:"
        echo "  - API Version: $api_version"
        echo "  - Heartbeat URL: $heartbeat_url"
        echo "  - Version URL: $version_url"
        echo "  - Docker Image: chromadb/chroma:${{ inputs.chromadb-version }}"

    - name: Debug ChromaDB on failure
      if: failure()
      shell: bash
      run: |
        echo "🚨 ChromaDB setup failed - collecting comprehensive debug information..."
        echo ""
        echo "📋 Container status:"
        docker ps -a --filter name=chromadb || true
        echo ""
        echo "📋 Container logs (last 100 lines):"
        docker logs --tail 100 chromadb || true
        echo ""
        echo "🔍 Container inspect (health status):"
        docker inspect chromadb --format='{{json .State.Health}}' | jq '.' 2>/dev/null || docker inspect chromadb || true
        echo ""
        echo "🌐 Network connectivity tests:"
        base_url="http://localhost:${{ inputs.port }}"

        echo "Testing v1 API heartbeat:"
        wget --spider --timeout=10 "${base_url}/api/v1/heartbeat" 2>&1 || true
        echo ""

        echo "Testing root heartbeat:"
        wget --spider --timeout=10 "${base_url}/heartbeat" 2>&1 || true
        echo ""

        echo "🔌 Port status:"
        if command -v netstat >/dev/null; then
          netstat -tulpn | grep ${{ inputs.port }} || echo "Port ${{ inputs.port }} not found in netstat"
        elif command -v ss >/dev/null; then
          ss -tulpn | grep ${{ inputs.port }} || echo "Port ${{ inputs.port }} not found in ss"
        else
          echo "Neither netstat nor ss available for port checking"
        fi
        echo ""

        echo "🐳 Docker system information:"
        docker version || true
        echo ""
        docker system info || true
        echo ""

        echo "🔍 Docker network inspection:"
        docker network ls || true
        echo ""

        echo "💾 System resources:"
        df -h || true
        echo ""
        free -h 2>/dev/null || true
        echo ""

        echo "🏷️ Image information:"
        docker images chromadb/chroma:${{ inputs.chromadb-version }} || true
