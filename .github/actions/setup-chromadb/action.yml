name: Setup ChromaDB
description: Setup ChromaDB container across different platforms with robust health checks

inputs:
  chromadb-version:
    description: ChromaDB version to use
    default: "0.5.23"
    required: false
  port:
    description: Port to expose ChromaDB on
    default: "8000"
    required: false
  timeout:
    description: Timeout in seconds for health checks
    default: "120"
    required: false

runs:
  using: composite
  steps:
    - name: Setup ChromaDB on Linux
      if: runner.os == 'Linux'
      shell: bash
      run: |
        echo "🐧 Setting up ChromaDB on Linux..."

        # Stop any existing container
        docker stop chromadb 2>/dev/null || true
        docker rm chromadb 2>/dev/null || true

        # Start ChromaDB with comprehensive health checks
        docker run -d \
          --name chromadb \
          -p ${{ inputs.port }}:8000 \
          -e ANONYMIZED_TELEMETRY=false \
          -e ALLOW_RESET=true \
          -e IS_PERSISTENT=true \
          --health-cmd "curl -f http://localhost:8000/api/v1/heartbeat || exit 1" \
          --health-interval 5s \
          --health-timeout 10s \
          --health-retries 20 \
          --health-start-period 30s \
          chromadb/chroma:${{ inputs.chromadb-version }}

        echo "⏳ Waiting for ChromaDB to become healthy..."

        # Wait for container to be healthy with extended timeout
        if ! timeout ${{ inputs.timeout }} bash -c 'until docker inspect chromadb --format="{{.State.Health.Status}}" 2>/dev/null | grep -q healthy; do sleep 2; echo -n "."; done'; then
          echo "❌ ChromaDB health check failed on Linux"
          echo "📋 Container logs:"
          docker logs chromadb
          echo "🔍 Container inspect:"
          docker inspect chromadb
          exit 1
        fi

        echo "✅ ChromaDB is healthy on Linux"

    - name: Setup ChromaDB on macOS
      if: runner.os == 'macOS'
      shell: bash
      run: |
        echo "🍎 Setting up ChromaDB on macOS..."

        # Stop any existing container
        docker stop chromadb 2>/dev/null || true
        docker rm chromadb 2>/dev/null || true

        # Start ChromaDB (health checks may not work on macOS Docker)
        docker run -d \
          --name chromadb \
          -p ${{ inputs.port }}:8000 \
          -e ANONYMIZED_TELEMETRY=false \
          -e ALLOW_RESET=true \
          -e IS_PERSISTENT=true \
          chromadb/chroma:${{ inputs.chromadb-version }}

        echo "⏳ Waiting for ChromaDB API to be ready..."

        # Manual health check with curl
        elapsed=0
        while [ $elapsed -lt ${{ inputs.timeout }} ]; do
          if curl -f -s http://localhost:${{ inputs.port }}/api/v1/heartbeat >/dev/null 2>&1; then
            echo "✅ ChromaDB API is ready on macOS"
            break
          fi
          sleep 2
          elapsed=$((elapsed + 2))
          echo -n "."
        done

        if [ $elapsed -ge ${{ inputs.timeout }} ]; then
          echo "❌ ChromaDB startup timeout on macOS"
          echo "📋 Container logs:"
          docker logs chromadb
          echo "🔍 Container status:"
          docker ps -a --filter name=chromadb
          exit 1
        fi

    - name: Setup ChromaDB on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "🪟 Setting up ChromaDB on Windows..."

        # Stop any existing container
        try { docker stop chromadb 2>$null } catch {}
        try { docker rm chromadb 2>$null } catch {}

        # Start ChromaDB
        docker run -d `
          --name chromadb `
          -p ${{ inputs.port }}:8000 `
          -e ANONYMIZED_TELEMETRY=false `
          -e ALLOW_RESET=true `
          -e IS_PERSISTENT=true `
          chromadb/chroma:${{ inputs.chromadb-version }}

        Write-Host "⏳ Waiting for ChromaDB API to be ready..."

        # Windows PowerShell health check
        $timeout = [int]"${{ inputs.timeout }}"
        $elapsed = 0
        $ready = $false

        while ($elapsed -lt $timeout -and -not $ready) {
          try {
            $response = Invoke-RestMethod -Uri "http://localhost:${{ inputs.port }}/api/v1/heartbeat" -Method Get -TimeoutSec 5
            Write-Host "✅ ChromaDB API is ready on Windows"
            $ready = $true
          } catch {
            Start-Sleep -Seconds 2
            $elapsed += 2
            Write-Host -NoNewline "."
          }
        }

        if (-not $ready) {
          Write-Host "❌ ChromaDB startup timeout on Windows"
          Write-Host "📋 Container logs:"
          docker logs chromadb
          Write-Host "🔍 Container status:"
          docker ps -a --filter name=chromadb
          exit 1
        }

    - name: Verify ChromaDB API
      shell: bash
      run: |
        echo "🔍 Final verification of ChromaDB API..."

        # Test the heartbeat endpoint
        if curl -f http://localhost:${{ inputs.port }}/api/v1/heartbeat; then
          echo "✅ ChromaDB heartbeat successful"
        else
          echo "❌ ChromaDB heartbeat failed"
          exit 1
        fi

        # Test version endpoint
        if curl -f http://localhost:${{ inputs.port }}/api/v1/version; then
          echo "✅ ChromaDB version endpoint accessible"
        else
          echo "⚠️  ChromaDB version endpoint not accessible (non-critical)"
        fi

        echo "🎉 ChromaDB setup complete and verified!"

    - name: Debug ChromaDB on failure
      if: failure()
      shell: bash
      run: |
        echo "🚨 ChromaDB setup failed - collecting debug information..."
        echo "📋 Container status:"
        docker ps -a --filter name=chromadb || true
        echo ""
        echo "📋 Container logs:"
        docker logs chromadb || true
        echo ""
        echo "🔍 Container inspect:"
        docker inspect chromadb || true
        echo ""
        echo "🌐 Network connectivity test:"
        curl -v http://localhost:${{ inputs.port }}/api/v1/heartbeat || true
        echo ""
        echo "🔌 Port status:"
        if command -v netstat >/dev/null; then
          netstat -tulpn | grep ${{ inputs.port }} || true
        elif command -v ss >/dev/null; then
          ss -tulpn | grep ${{ inputs.port }} || true
        fi
