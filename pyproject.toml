[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "shard-markdown"
version = "0.1.0"
description = "Intelligent markdown document chunking for ChromaDB collections"
authors = [
    {name = "Shard Markdown Contributors", email = "shard-md@example.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.12"
keywords = ["markdown", "chromadb", "cli", "chunking", "vector-database"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup",
    "Topic :: Database",
]

dependencies = [
    "click>=8.1.0",
    "rich>=13.5.0",
    "markdown>=3.5.0",
    "python-frontmatter>=1.0.0",
    "pydantic>=2.4.0",
    "pyyaml>=6.0.0",
    "python-dotenv>=1.0.0",
    "typing-extensions>=4.8.0",
    "ruff>=0.12.7",
]

[project.optional-dependencies]
chromadb = [
    "chromadb>=1.0.16",
    "tiktoken>=0.5.0",
]

[project.scripts]
shard-md = "shard_markdown.cli.main:cli"

[project.urls]
Homepage = "https://github.com/shard-markdown/shard-markdown"
Repository = "https://github.com/shard-markdown/shard-markdown"
Documentation = "https://shard-markdown.readthedocs.io"
"Bug Tracker" = "https://github.com/shard-markdown/shard-markdown/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
shard_markdown = ["py.typed"]

[tool.ruff.lint.isort]
known-first-party = ["shard_markdown"]
force-single-line = false
lines-after-imports = 2
no-lines-before = ["future", "standard-library"]

[tool.ruff]
line-length = 88
target-version = "py312"
exclude = [
    ".claude",
    "docs",
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "node_modules",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "D",    # pydocstyle
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "S",    # bandit
]
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "S101",  # Use of assert detected
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"test_*.py" = ["D100", "D101", "D102", "D103", "S101"]  # Relax requirements for tests
"tests/**/*.py" = ["D100", "D101", "D102", "D103", "S101"]
"tests/fixtures/chromadb_fixtures.py" = ["S607"]  # Allow subprocess with partial path for docker commands

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "markdown.*",
    "frontmatter.*",
    "tiktoken.*",
    "pytest.*",
    "pytest_mock.*",
    "psutil.*",
    "click.*"
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["shard_markdown.cli.*", "shard_markdown.config.*"]
allow_untyped_decorators = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_missing_imports = true
allow_untyped_defs = true
allow_untyped_calls = true
allow_untyped_decorators = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "performance: marks tests as performance tests",
    "chromadb: marks tests that require real ChromaDB instance",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]


[dependency-groups]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0.0",
    "ruff>=0.12.7",
    "mypy>=1.6.0",
    "types-PyYAML>=6.0.0",
    "pre-commit>=3.4.0",
    "safety>=2.3.0",
    "bandit[toml]>=1.7.0",
    "psutil>=5.9.0",
    "docker>=6.1.0",
]
